/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package de.testcompany.Event_Notification;

import de.testcompany.Event_Notification.utils.HTTPClient;
import de.testcompany.Event_Notification.utils.SpeakeasyHTTPClient;

/**
 * Event Notification: ## Summary
 * Use this API to subscribe to event notifications such as 'submission created'.
 * 
 * Specify a webhook Url to automatically receive event notifications when events occur (PUSH).
 * Or alternatively use the endpoint GET /subscription/{subscriptionId}/events to PULL available events.
 * 
 * Available Event Types can be accessed through the Event Types Endpoints.
 * 
 * If you use a webhook url, make sure, that at least the TECHNICAL_PING event, needs to be processed, for every webhook.
 * https://developer.ehyphome.de/local-apis/errorHandling.pdf - Technical description for error handling
 */
public class EventNotification {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        /**
         * Production
         */
        "https://event-notification-service.ehyp.prod.interhyp-cloud.de",
        /**
         * Dev Stage
         */
        "https://event-notification-service.ehyp.dev.interhyp-cloud.de",
	};
  	
    /**
     * Event Types collect all information and further descriptions about all available Event Type Categories and Event Type Names.
     */
    public EventTypes eventTypes;
    /**
     * Events hold basic information about what happened in the application. Based on the Events it's possible to get the specific data of the underlying resource.
     */
    public Events events;
    /**
     * General information about the API and the connectivity
     */
    public Info info;
    /**
     * Tag to describe internal endpoints
     */
    public Internal internal;
    /**
     * With a Subscription it's possible to configure which Events are suitable for your company and how they should be dispatched.
     */
    public Subscriptions subscriptions;	

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(de.testcompany.Event_Notification.models.shared.Security security) {
			this.sdkConfiguration.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = de.testcompany.Event_Notification.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public EventNotification build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.security != null) {
				this.sdkConfiguration.securityClient = de.testcompany.Event_Notification.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, this.sdkConfiguration.security);
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new EventNotification(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private EventNotification(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
		
		this.eventTypes = new EventTypes(this.sdkConfiguration);
		
		this.events = new Events(this.sdkConfiguration);
		
		this.info = new Info(this.sdkConfiguration);
		
		this.internal = new Internal(this.sdkConfiguration);
		
		this.subscriptions = new Subscriptions(this.sdkConfiguration);
	}
}