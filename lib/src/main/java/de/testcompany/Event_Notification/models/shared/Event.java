/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package de.testcompany.Event_Notification.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import de.testcompany.Event_Notification.utils.DateTimeDeserializer;
import de.testcompany.Event_Notification.utils.DateTimeSerializer;
import java.time.OffsetDateTime;

/**
 * Event - Primary Key of a Subscription.
 */

public class Event {
    /**
     * Original occurrence of the Event. For example, when the submission was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("entityAt")
    public OffsetDateTime entityAt;

    public Event withEntityAt(OffsetDateTime entityAt) {
        this.entityAt = entityAt;
        return this;
    }
    
    /**
     * Domain object id. For example submissionId.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entityId")
    public String entityId;

    public Event withEntityId(String entityId) {
        this.entityId = entityId;
        return this;
    }
    
    /**
     * Event id
     */
    @JsonProperty("eventId")
    public String eventId;

    public Event withEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }
    
    /**
     * Filter for event status:
     *   * `OPEN` - Event not processed yet.
     *   * `RETRY` - Event processed incorrectly. Retry is performed at the next dispatch interval. Maximum number of retries is 3.
     *   * `ERROR` - Event processed incorrectly three times. No retry is performed until the status is reset to `OPEN`.
     *   * `CLOSED` - Event was dispatched successfully.
     * 
     */
    @JsonProperty("eventStatus")
    public String eventStatus;

    public Event withEventStatus(String eventStatus) {
        this.eventStatus = eventStatus;
        return this;
    }
    
    /**
     * Event type specific category and name.
     */
    @JsonProperty("eventType")
    public EventTypeSingle eventType;

    public Event withEventType(EventTypeSingle eventType) {
        this.eventType = eventType;
        return this;
    }
    
    /**
     * Primary Key of a Subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriptionId")
    public String subscriptionId;

    public Event withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }
    
    public Event(@JsonProperty("eventId") String eventId, @JsonProperty("eventStatus") String eventStatus, @JsonProperty("eventType") EventTypeSingle eventType) {
        this.eventId = eventId;
        this.eventStatus = eventStatus;
        this.eventType = eventType;
  }
}
