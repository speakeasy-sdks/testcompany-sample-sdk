/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package de.testcompany.Event_Notification;

import com.fasterxml.jackson.databind.ObjectMapper;
import de.testcompany.Event_Notification.utils.HTTPClient;
import de.testcompany.Event_Notification.utils.HTTPRequest;
import de.testcompany.Event_Notification.utils.JSON;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;

/**
 * Event Types collect all information and further descriptions about all available Event Type Categories and Event Type Names.
 */
public class EventTypes {
	
	private SDKConfiguration sdkConfiguration;

	public EventTypes(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Get Event Categories.
     * Returns a list of all possible Event Type Categories.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public de.testcompany.Event_Notification.models.operations.GetCategoriesResponse getCategories() throws Exception {
        return this.getCategories(null);
    }

    /**
     * Get Event Categories.
     * Returns a list of all possible Event Type Categories.
     * @param language Optional language (EN/DE). The default is EN.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public de.testcompany.Event_Notification.models.operations.GetCategoriesResponse getCategories(String language) throws Exception {
        de.testcompany.Event_Notification.models.operations.GetCategoriesRequest request = new de.testcompany.Event_Notification.models.operations.GetCategoriesRequest();
        request.language=language;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = de.testcompany.Event_Notification.utils.Utils.generateURL(baseUrl, "/categories");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = de.testcompany.Event_Notification.utils.Utils.getQueryParams(de.testcompany.Event_Notification.models.operations.GetCategoriesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        de.testcompany.Event_Notification.models.operations.GetCategoriesResponse res = new de.testcompany.Event_Notification.models.operations.GetCategoriesResponse(contentType, httpRes.statusCode(), httpRes) {{
            eventCategoryDescriptions = null;
            rfc7807Problem = null;
            oAuthProblem = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (de.testcompany.Event_Notification.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                de.testcompany.Event_Notification.models.shared.EventCategoryDescriptions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), de.testcompany.Event_Notification.models.shared.EventCategoryDescriptions.class);
                res.eventCategoryDescriptions = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
            if (de.testcompany.Event_Notification.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                de.testcompany.Event_Notification.models.shared.Rfc7807Problem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), de.testcompany.Event_Notification.models.shared.Rfc7807Problem.class);
                res.rfc7807Problem = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (de.testcompany.Event_Notification.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                de.testcompany.Event_Notification.models.shared.OAuthProblem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), de.testcompany.Event_Notification.models.shared.OAuthProblem.class);
                res.oAuthProblem = out;
            }
        }

        return res;
    }

    /**
     * Get an Event Category.
     * Returns a specific Event Type Category with its description.
     * @param typeCategory The unique name of a specific Event Type Category.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public de.testcompany.Event_Notification.models.operations.GetCategoryResponse getCategory(String typeCategory) throws Exception {
        return this.getCategory(typeCategory, null);
    }

    /**
     * Get an Event Category.
     * Returns a specific Event Type Category with its description.
     * @param typeCategory The unique name of a specific Event Type Category.
     * @param language Optional language (EN/DE). The default is EN.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public de.testcompany.Event_Notification.models.operations.GetCategoryResponse getCategory(String typeCategory, String language) throws Exception {
        de.testcompany.Event_Notification.models.operations.GetCategoryRequest request = new de.testcompany.Event_Notification.models.operations.GetCategoryRequest(typeCategory);
        request.language=language;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = de.testcompany.Event_Notification.utils.Utils.generateURL(de.testcompany.Event_Notification.models.operations.GetCategoryRequest.class, baseUrl, "/categories/{typeCategory}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = de.testcompany.Event_Notification.utils.Utils.getQueryParams(de.testcompany.Event_Notification.models.operations.GetCategoryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        de.testcompany.Event_Notification.models.operations.GetCategoryResponse res = new de.testcompany.Event_Notification.models.operations.GetCategoryResponse(contentType, httpRes.statusCode(), httpRes) {{
            eventCategoryDescription = null;
            rfc7807Problem = null;
            oAuthProblem = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (de.testcompany.Event_Notification.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                de.testcompany.Event_Notification.models.shared.EventCategoryDescription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), de.testcompany.Event_Notification.models.shared.EventCategoryDescription.class);
                res.eventCategoryDescription = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
            if (de.testcompany.Event_Notification.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                de.testcompany.Event_Notification.models.shared.Rfc7807Problem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), de.testcompany.Event_Notification.models.shared.Rfc7807Problem.class);
                res.rfc7807Problem = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (de.testcompany.Event_Notification.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                de.testcompany.Event_Notification.models.shared.OAuthProblem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), de.testcompany.Event_Notification.models.shared.OAuthProblem.class);
                res.oAuthProblem = out;
            }
        }

        return res;
    }

    /**
     * Get an Event Type Name.
     * Returns a specific Event Type Name with its description for a specific Event Type Category.
     * @param typeCategory The unique name of a specific Event Type Category.
     * @param typeName The unique name of a specific Event Type Name.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public de.testcompany.Event_Notification.models.operations.GetNameResponse getName(String typeCategory, String typeName) throws Exception {
        return this.getName(typeCategory, typeName, null);
    }

    /**
     * Get an Event Type Name.
     * Returns a specific Event Type Name with its description for a specific Event Type Category.
     * @param typeCategory The unique name of a specific Event Type Category.
     * @param typeName The unique name of a specific Event Type Name.
     * @param language Optional language (EN/DE). The default is EN.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public de.testcompany.Event_Notification.models.operations.GetNameResponse getName(String typeCategory, String typeName, String language) throws Exception {
        de.testcompany.Event_Notification.models.operations.GetNameRequest request = new de.testcompany.Event_Notification.models.operations.GetNameRequest(typeCategory, typeName);
        request.language=language;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = de.testcompany.Event_Notification.utils.Utils.generateURL(de.testcompany.Event_Notification.models.operations.GetNameRequest.class, baseUrl, "/categories/{typeCategory}/names/{typeName}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = de.testcompany.Event_Notification.utils.Utils.getQueryParams(de.testcompany.Event_Notification.models.operations.GetNameRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        de.testcompany.Event_Notification.models.operations.GetNameResponse res = new de.testcompany.Event_Notification.models.operations.GetNameResponse(contentType, httpRes.statusCode(), httpRes) {{
            eventNameDescription = null;
            rfc7807Problem = null;
            oAuthProblem = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (de.testcompany.Event_Notification.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                de.testcompany.Event_Notification.models.shared.EventNameDescription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), de.testcompany.Event_Notification.models.shared.EventNameDescription.class);
                res.eventNameDescription = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
            if (de.testcompany.Event_Notification.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                de.testcompany.Event_Notification.models.shared.Rfc7807Problem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), de.testcompany.Event_Notification.models.shared.Rfc7807Problem.class);
                res.rfc7807Problem = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (de.testcompany.Event_Notification.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                de.testcompany.Event_Notification.models.shared.OAuthProblem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), de.testcompany.Event_Notification.models.shared.OAuthProblem.class);
                res.oAuthProblem = out;
            }
        }

        return res;
    }

    /**
     * Get Event Names.
     * Returns a list of all possible Event Type Names for a specific Event Type Category.
     * @param typeCategory The unique name of a specific Event Type Category.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public de.testcompany.Event_Notification.models.operations.GetNamesResponse getNames(String typeCategory) throws Exception {
        return this.getNames(typeCategory, null);
    }

    /**
     * Get Event Names.
     * Returns a list of all possible Event Type Names for a specific Event Type Category.
     * @param typeCategory The unique name of a specific Event Type Category.
     * @param language Optional language (EN/DE). The default is EN.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public de.testcompany.Event_Notification.models.operations.GetNamesResponse getNames(String typeCategory, String language) throws Exception {
        de.testcompany.Event_Notification.models.operations.GetNamesRequest request = new de.testcompany.Event_Notification.models.operations.GetNamesRequest(typeCategory);
        request.language=language;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = de.testcompany.Event_Notification.utils.Utils.generateURL(de.testcompany.Event_Notification.models.operations.GetNamesRequest.class, baseUrl, "/categories/{typeCategory}/names", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = de.testcompany.Event_Notification.utils.Utils.getQueryParams(de.testcompany.Event_Notification.models.operations.GetNamesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        de.testcompany.Event_Notification.models.operations.GetNamesResponse res = new de.testcompany.Event_Notification.models.operations.GetNamesResponse(contentType, httpRes.statusCode(), httpRes) {{
            eventNameDescriptions = null;
            rfc7807Problem = null;
            oAuthProblem = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (de.testcompany.Event_Notification.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                de.testcompany.Event_Notification.models.shared.EventNameDescriptions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), de.testcompany.Event_Notification.models.shared.EventNameDescriptions.class);
                res.eventNameDescriptions = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
            if (de.testcompany.Event_Notification.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                de.testcompany.Event_Notification.models.shared.Rfc7807Problem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), de.testcompany.Event_Notification.models.shared.Rfc7807Problem.class);
                res.rfc7807Problem = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (de.testcompany.Event_Notification.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                de.testcompany.Event_Notification.models.shared.OAuthProblem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), de.testcompany.Event_Notification.models.shared.OAuthProblem.class);
                res.oAuthProblem = out;
            }
        }

        return res;
    }
}